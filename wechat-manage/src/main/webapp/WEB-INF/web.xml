<?xml version="1.0" encoding="UTF-8"?>

<web-app xmlns="http://java.sun.com/xml/ns/javaee" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://java.sun.com/xml/ns/javaee 
						http://java.sun.com/xml/ns/javaee/web-app_3_0.xsd"
	version="3.0">

	<!-- Web容器加载顺序ServletContext->context-param->listener->filter->servlet -->

	<display-name>Archetype Created Web Application</display-name>

	<!-- 配置session时时间,单位是分钟 ,零或负数表示会话永不超时 -->
	<session-config>
		<session-timeout>120</session-timeout>
	</session-config>

	<!-- 起始欢迎界面 -->
	<welcome-file-list>
		<welcome-file>index.jsp</welcome-file>
		<welcome-file>index.html</welcome-file>
		<welcome-file>index.htm</welcome-file>
		<welcome-file>default.html</welcome-file>
		<welcome-file>default.htm</welcome-file>
		<welcome-file>default.jsp</welcome-file>
	</welcome-file-list>

	<!-- 设计路径变量值 -->
	<context-param>
		<param-name>webAppRootKey</param-name>
		<param-value>wechat-manage</param-value>
	</context-param>

	<!-- ====================================================================== 
		日志记录配置 -->
	<context-param>
		<!--log4j配置文件加载 -->
		<description>日志配置文件路径</description>
		<param-name>log4jConfigLocation</param-name>
		<param-value>classpath:properties/log4j.properties</param-value>
	</context-param>

	<context-param>
		<!--启动一个watchdog线程每6秒扫描一下log4j配置文件的变化 -->
		<description>日志页面的刷新间隔</description>
		<param-name>log4jRefreshInterval</param-name>
		<param-value>6000</param-value>
	</context-param>
	
	<!-- ====================================================================== 
		加载Spring容器配置:监听器配置 -->

	<listener>
		<description>log4j监听器</description>
		<listener-class>org.springframework.web.util.Log4jConfigListener</listener-class>
	</listener>
	<listener>
		<description>Introspector缓存清除监听器:防止spring内存溢出监听器</description>
		<listener-class>org.springframework.web.util.IntrospectorCleanupListener</listener-class>
	</listener>
	<listener>
		<description>request监听器</description>
		<listener-class>org.springframework.web.context.request.RequestContextListener</listener-class>
	</listener>
	<listener>
		<description> Spring监听器</description>
		<listener-class>org.springframework.web.context.ContextLoaderListener</listener-class>
	</listener>
	<!-- 压入项目路径 -->
	<listener>
		<listener-class>org.springframework.web.util.WebAppRootListener</listener-class>
	</listener>  


	<!-- ====================================================================== 
		设置Spring容器加载所有的配置文件的路径,否则Spring会默认从WEB-INF下寻找配置文件 -->
	<context-param>
		<param-name>contextConfigLocation</param-name>
		<!-- maven构建项目的时候classpath指的是resources文件夹位置 -->
		<param-value>
			classpath:systemConfig/spring-applicationContext.xml
		</param-value>
	</context-param>

		<!-- ====================================================================== 
		shiro配置 -->
	<!-- 配置Shiro过滤器,先让Shiro过滤系统接收到的请求 -->
	<!-- 这里filter-name必须对应applicationContext.xml中定义的<bean id="shiroFilter"/> -->
	<!-- 使用[/*]匹配所有请求,保证所有的可控请求都经过Shiro的过滤 -->
	<!-- 通常会将此filter-mapping放置到最前面(即其他filter-mapping前面),以保证它是过滤器链中第一个起作用的 -->
	<filter>
		<filter-name>shiroFilter</filter-name>
		<filter-class>org.springframework.web.filter.DelegatingFilterProxy</filter-class>
		<init-param>
			<!-- 该值缺省为false,表示生命周期由SpringApplicationContext管理,设置为true则表示由ServletContainer管理 -->
			<param-name>targetFilterLifecycle</param-name>
			<param-value>false</param-value>
		</init-param>
	</filter>

	<filter-mapping>
		<filter-name>shiroFilter</filter-name>
		<url-pattern>*.shtml</url-pattern>
	</filter-mapping>

	<!-- ====================================================================== 
		配置SpringMVC核心控制器 -->
	<servlet>
		<!-- springmvc的核心是DispatcherServlet，它负责控制整个页面的请求路径 -->
		<servlet-name>springDispatcherServlet</servlet-name>
		<servlet-class>org.springframework.web.servlet.DispatcherServlet</servlet-class>
		<init-param>
			<!-- 这个param-name必须是contextConfigLocation -->
			<description>spring mvc 配置文件</description>
			<param-name>contextConfigLocation</param-name>
			<param-value>
				classpath:systemConfig/spring-servlet-context.xml
			</param-value>
		</init-param>
		<load-on-startup>1</load-on-startup>
	</servlet>
	<!--拦截所有以shtml结尾的请求 -->
	<servlet-mapping>
		<servlet-name>springDispatcherServlet</servlet-name>
		<url-pattern>*.shtml</url-pattern>
	</servlet-mapping>

	<!-- ====================================================================== 
		字符编码过滤器配置 -->
	<filter>
		<!--处理从页面传递中文到后台而出现的中文乱码问题 -->
		<description>编码(字符集)过滤器 </description>
		<filter-name>encodingFilter</filter-name>
		<filter-class>org.springframework.web.filter.CharacterEncodingFilter</filter-class>
		<init-param>
			<description>字符集编码</description>
			<param-name>encoding</param-name>
			<param-value>UTF-8</param-value>
		</init-param>
		<init-param>
			<description>强制设置请求编码格式为上面设置的utf-8</description>
			<param-name>forceEncoding</param-name>
			<param-value>true</param-value>
		</init-param>
	</filter>
	<filter-mapping>
		<filter-name>encodingFilter</filter-name>
		<url-pattern>/*</url-pattern>
	</filter-mapping>

	<!-- Druid,监控数据库,以及WEB访问连接信息 -->
	<filter>
		<!-- WebStatFilter用于采集web-jdbc关联监控的数据。 -->
		<filter-name>druidWebStatFilter</filter-name>
		<filter-class>com.alibaba.druid.support.http.WebStatFilter</filter-class>
		<init-param>
			<description>经常需要排除一些不必要的url</description>
			<param-name>exclusions</param-name>
			<param-value>/css/*,/context/*,/plug-in/*,*.js,*.css,*/druid/*,/attached/*,*.jsp</param-value>
		</init-param>
		<init-param>
			<!-- 是否允许重置 -->
			<param-name>resetEnable</param-name>
			<param-value>false</param-value>
		</init-param>
		<!-- 缺省sessionStatMaxCount是1000个。你可以按需要进行配置 -->
		<init-param>
			<param-name>sessionStatMaxCount</param-name>
			<param-value>1000</param-value>
		</init-param>
		<!-- 关闭session统计功能 -->
		<init-param>
			<param-name>sessionStatEnable</param-name>
			<param-value>true</param-value>
		</init-param>
		<!-- 配置principalSessionName，使得druid能够知道当前的session的用户是谁 -->
		<init-param>
			<param-name>principalSessionName</param-name>
			<param-value></param-value>
		</init-param>
		<!-- druid 0.2.7版本开始支持profile，配置profileEnable能够监控单个url调用的sql列表 -->
		<init-param>
			<param-name>profileEnable</param-name>
			<param-value>true</param-value>
		</init-param>
	</filter>
	<filter-mapping>
		<filter-name>druidWebStatFilter</filter-name>
		<url-pattern>/*</url-pattern>
	</filter-mapping>
	<servlet>
		<servlet-name>druidStatView</servlet-name>
		<servlet-class>com.alibaba.druid.support.http.StatViewServlet</servlet-class>
	</servlet>
	<servlet-mapping>
		<servlet-name>druidStatView</servlet-name>
		<url-pattern>/system/druid/*</url-pattern>
	</servlet-mapping>

	<!-- 错误跳转页面 -->
	<error-page>
		<error-code>400</error-code>
		<location>/WEB-INF/webviews/errorPage/405.jsp</location>
	</error-page>
	<error-page>
		<error-code>401</error-code>
		<location>/WEB-INF/webviews/unauthorized.jsp</location>
	</error-page>
	<error-page>
		<error-code>403</error-code>
		<location>/WEB-INF/webviews/errorPage/403.jsp</location>
	</error-page>
	<error-page>
		<error-code>404</error-code>
		<location>/WEB-INF/webviews/errorPage/404.jsp</location>
	</error-page>
	<error-page>
		<error-code>405</error-code>
		<location>/WEB-INF/webviews/errorPage/405.jsp</location>
	</error-page>
	<error-page>
		<error-code>500</error-code>
		<location>/WEB-INF/webViews/errorPage/500.jsp</location>
	</error-page>
	<error-page>
		<error-code>503</error-code>
		<location>/WEB-INF/webViews/errorPage/503.jsp</location>
	</error-page>
	<error-page>
		<exception-type>java.lang.Throwable</exception-type>
		<location>/WEB-INF/webviews/errorPage/500.jsp</location>
	</error-page>
</web-app>
