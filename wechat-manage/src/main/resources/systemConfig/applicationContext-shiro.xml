<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:util="http://www.springframework.org/schema/util"
	xmlns:aop="http://www.springframework.org/schema/aop"
	xmlns:tx="http://www.springframework.org/schema/tx"
	xmlns:context="http://www.springframework.org/schema/context"
	xsi:schemaLocation="
		http://www.springframework.org/schema/aop 
		http://www.springframework.org/schema/aop/spring-aop-4.3.xsd
		http://www.springframework.org/schema/beans 
		http://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/util 
		http://www.springframework.org/schema/util/spring-util-4.3.xsd
		http://www.springframework.org/schema/context 
		http://www.springframework.org/schema/context/spring-context-4.3.xsd
		http://www.springframework.org/schema/tx 
		http://www.springframework.org/schema/tx/spring-tx-4.3.xsd">

	<description>Shiro Configuration</description>

	<!-- shiro于数据交互的类 ，继承自AuthorizingRealm的自定义Realm,即指定Shiro验证用户登录的类为自定义实现 -->
	<bean id="shiroRealm" class="com.cdeledu.core.shiro.ShiroRealm" />
	
	<!-- 会话验证调度器 -->
	<bean id="sessionValidationScheduler" 
		class="org.apache.shiro.session.mgt.ExecutorServiceSessionValidationScheduler">
		<!-- 间隔多少时间检查，不配置是60分钟 -->
		<property name="interval" value="${session.validate.timespan}"/>
		<property name="sessionManager" ref="sessionManager" />
	</bean>
	
	<!-- sessionIdCookie的实现,用于重写覆盖容器默认的JSESSIONID --> 
	<bean id="sessionIdCookie" class="org.apache.shiro.web.servlet.SimpleCookie">
		<!--cookie的name -->
		<property name="name" value="shiro.sesssionCookie"/>
		<!-- 设置Cookie的路径，默认空，即存储在域名根下 -->
		<property name="path" value="/"/>
		<!--  设置Cookie的过期时间，秒为单位，默认-1表示关闭浏览器时过期Cookie -->
		<property name="maxAge" value="7200"/>
		<!-- 如果设置为true，则客户端不会暴露给客户端脚本代码，使用HttpOnly cookie有助于减少某些类型的跨站点脚本攻击 -->
		<property name="httpOnly" value="true"/>
	</bean>
	
	<!-- Session Manager -->
	<bean id="sessionManager" class="org.apache.shiro.web.session.mgt.DefaultWebSessionManager">
		<!-- session的失效时长，默认是30 分钟((1800000)),该值以毫秒为时间单位-->
		<property name="globalSessionTimeout" value="${session.timeout}" />
		<!-- 是否在会话过期后会调用SessionDAO的delete方法删除会话,默认true -->
		<property name="deleteInvalidSessions" value="true" />
		<!-- 间隔多少时间检查，不配置是60分钟 -->	
		<property name="sessionValidationScheduler" ref="sessionValidationScheduler"/>
		<!-- 是否开启session验证检测 -->
		<property name="sessionValidationSchedulerEnabled" value="true"/>
		<!-- 定时清理失效session , 清理用户直接关闭浏览器造成的孤立会话 :默认每小时检测一次-->
		<property name="sessionValidationInterval" value="${session.validation}"/>
		<property name="sessionIdCookie" ref="sessionIdCookie"/>
		<!-- 是否启用/禁用，默认是启用的；如果禁用后将不会设置Session Id Cookie，即默认使用了Servlet容器的JSESSIONID -->
		<property name="sessionIdCookieEnabled" value="true" />
		<!-- session 监听，可以多个。 -->
		<property name="sessionListeners">
			<list>
				<bean class="com.cdeledu.core.shiro.listener.CustomSessionListener"/>
			</list>
		</property>
	</bean>

	<!-- 定义Shiro安全管理配置 -->
	<bean id="securityManager" class="org.apache.shiro.web.mgt.DefaultWebSecurityManager">
		<property name="realm" ref="shiroRealm" />
		<!-- 注入session 管理器 -->
		<property name="sessionManager" ref="sessionManager" />
		<!-- 注入缓存管理器 -->
		<!-- <property name="cacheManager" ref="cacheManager"/> -->
	</bean>

	<!-- 登录校验 -->
	<bean id="loginFilter" class="com.cdeledu.core.shiro.filter.LoginFilter"/>
	<!-- 角色判断校验 -->
	<bean id="roleFilter" class="com.cdeledu.core.shiro.filter.RoleFilter"/>
	<!-- 权限校验 -->
	<bean id="permissionFilter" class="com.cdeledu.core.shiro.filter.PermissionFilter"/>
	<!-- 用户session -->
	<bean id="userSessionFilter" class="com.cdeledu.core.shiro.filter.UserSessionFilter" />

	<!-- ================================================================================== 
		Shiro验证URL时,URL匹配成功便不再继续匹配查找(所以要注意配置文件中的URL顺序,尤其在使用通配符时),
		故filterChainDefinitions的配置顺序为自上而下,以最上面的为准
	-->
	
	<bean name="shiroFilterChainDefinitions" class="java.lang.String">
		<constructor-arg>
			<value>
				/loginController** = anon
				/loginController/** = anon
				/sysPage/** = anon,kickoutFilter
				/homeController/** = loginFilter
				/dataSourceController** = authc,roleFilter[administrator]
				/** = loginFilter,permissionFilter,kickoutFilter,authc
			</value>
		</constructor-arg>
	</bean>

	<!-- Shiro主过滤器本身功能十分强大,其强大之处就在于它支持任何基于URL路径表达式的、自定义的过滤器的执行 -->
	<!-- Web应用中,Shiro可控制的Web请求必须经过Shiro主过滤器的拦截,Shiro对基于Spring的Web应用提供了完美的支持 -->
	<bean id="shiroFilter" class="org.apache.shiro.spring.web.ShiroFilterFactoryBean">
		<!-- Shiro的核心安全接口,这个属性是必须的 -->
		<property name="securityManager" ref="securityManager" />
		<!-- 要求登录时的链接(可根据项目的URL进行替换),非必须的属性,默认会自动寻找Web工程根目录下的"/login.jsp"页面 -->
		<property name="loginUrl" value="/loginController.shtml?doLogin" />
		<!-- 登录成功后要跳转的连接(本例中此属性用不到,因为登录成功后的处理逻辑在LoginController里硬编码为center.jsp了) -->
		<property name="successUrl" value="/loginController.shtml?doLogin"/>
		<!-- 用户访问未对其授权的资源时,所显示的连接 -->
		<property name="unauthorizedUrl" value="/sysPage/unauthorized.shtml" />
		<!-- 自定义filter，可用来更改默认的表单名称配置 -->
		<property name="filters">
			<util:map>
				<entry key="loginFilter" value-ref="loginFilter"/>
				<entry key="roleFilter" value-ref="roleFilter"/>
				<entry key="permissionFilter" value-ref="permissionFilter"/>
				<entry key="kickoutFilter" value-ref="kickoutSessionFilter"/>
				<entry key="userSessionFilter" value-ref="userSessionFilter"/>
			</util:map>
		</property>
		<!-- Shiro连接约束配置,即过滤链的定义 -->
		<!-- 下面value值的第一个'/'代表的路径是相对于HttpServletRequest.getContextPath()的值来的 -->
		<property name="filterChainDefinitions" ref="shiroFilterChainDefinitions"/>
	</bean>
	
	<!-- 保证实现了Shiro内部lifecycle函数的bean执行 -->
	<bean id="lifecycleBeanPostProcessor" class="org.apache.shiro.spring.LifecycleBeanPostProcessor" />

	<!-- session 校验单个用户是否多次登录 -->
	<bean id="kickoutSessionFilter" class="com.cdeledu.core.shiro.filter.KickoutSessionFilter">
		<property name="kickoutUrl" value="/loginController.shtml?doLogin"/>
	</bean>
	
	<!-- 开启shiro的注解，需借助SpringAOP扫描使用Shiro注解的类,并在必要时进行安全逻辑验证 -->
	<bean
		class="org.springframework.aop.framework.autoproxy.DefaultAdvisorAutoProxyCreator"
		depends-on="lifecycleBeanPostProcessor"/>
	<bean
		class="org.apache.shiro.spring.security.interceptor.AuthorizationAttributeSourceAdvisor">
		<property name="securityManager" ref="securityManager" />
	</bean>
</beans>
