<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:aop="http://www.springframework.org/schema/aop"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:p="http://www.springframework.org/schema/p"
	xmlns:tx="http://www.springframework.org/schema/tx"
	xsi:schemaLocation="http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-4.3.xsd
		http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-4.3.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.3.xsd">

	<!-- 业务逻辑组件自动扫描dao和service包(自动注入) -->
	<!-- 加载service,此时要排除要controller,因为controller已经spring-servlet-context中加载过了 -->
	<context:component-scan base-package="com.cdeledu">
		<context:exclude-filter type="annotation"
			expression="org.springframework.stereotype.Controller" />
	</context:component-scan>
	
	<!-- ====================================================================== 
		数据库映射 指定连接数据库的基本属性信息 -->
	
	<bean name="dataSource" class="org.springframework.jndi.JndiObjectFactoryBean">
		<property name="jndiName" value="java:comp/env/jdbc/mysqlDB"/> 
	</bean>
	<!-- ====================================================================== 
		配置mybatis模板 -->
	<!-- 配置sqlSessionFactory -->
	<bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
		<!-- mybaits的全局配置文件 -->
		<!-- 
		<property name="configLocation" value="classpath:systemConfig/applicationContext-mybatis.xml" />
		 -->
		<!-- 指定数据库的数据源 -->
		<property name="dataSource" ref="dataSource" />
		<!-- 指定mybatis，mapper文件的位置 -->
		<property name="mapperLocations" value="classpath:com/cdeledu/dao/impl/*/*.xml" />
	</bean>
	

	<!-- 配置mapper扫描器 -->
	<!-- 扫描basePackage下所有以@Repository标识的 接口进行自动生成代理的Dao -->
	<bean class="org.mybatis.spring.mapper.MapperScannerConfigurer"
		p:sqlSessionFactoryBeanName="sqlSessionFactory">
		<!-- 扫描包的路径，如果需要扫描多个包，中间使用半角 逗号隔开 -->
		<property name="basePackage" value="com.cdeledu.dao" />
		<property name="annotationClass" value="org.springframework.stereotype.Repository"/>
	</bean>
	
	<bean id="sqlSessionTemplate" class="org.mybatis.spring.SqlSessionTemplate">
		<constructor-arg ref="sqlSessionFactory" />
	</bean>

	<!-- ====================================================================== 
		JDBC 事务管理:在*ServiceImpl里写@Transactional就可以启用事物管理 -->
	<!-- 声明式事务管理器 -->
	<bean id="transactionManager"
		class="org.springframework.jdbc.datasource.DataSourceTransactionManager"
		p:dataSource-ref="dataSource" />

	<!-- 事务管理 通知 -->
	<!-- 对insert,update,remove 操作的方法进行事务管理,只要有异常就回滚 -->
	<!-- 对select,count 操作的方法,开启只读,提高数据库访问性能 -->
	<tx:advice id="txAdvice" transaction-manager="transactionManager">
		<tx:attributes>
			<!-- 数据增加 -->
			<tx:method name="save*" propagation="REQUIRED" rollback-for="java.lang.Throwable" />
			<tx:method name="add*" propagation="REQUIRED" rollback-for="java.lang.Throwable" />
			<tx:method name="create*" propagation="REQUIRED" rollback-for="java.lang.Throwable" />
			<tx:method name="insert*" propagation="REQUIRED" rollback-for="java.lang.Throwable" />
			<tx:method name="append*" propagation="REQUIRED" rollback-for="java.lang.Throwable" />
			<!-- 数据删除 -->
			<tx:method name="delete*" propagation="REQUIRED" rollback-for="java.lang.Throwable" />
			<tx:method name="remove*" propagation="REQUIRED" rollback-for="java.lang.Throwable" />
			<!-- 数据修改 -->
			<tx:method name="update*" propagation="REQUIRED" rollback-for="java.lang.Throwable" />
			<tx:method name="merge*" propagation="REQUIRED" rollback-for="java.lang.Throwable" />
			<tx:method name="modify*" propagation="REQUIRED" rollback-for="java.lang.Throwable" />
			<tx:method name="edit*" propagation="REQUIRED" rollback-for="java.lang.Throwable" />
			<!-- 数据查询 -->
			<tx:method name="get*" read-only="true" propagation="SUPPORTS" />
			<tx:method name="count*" read-only="true" propagation="SUPPORTS" />
			<tx:method name="query*" read-only="true" propagation="SUPPORTS" />
			<tx:method name="select*" read-only="true" propagation="SUPPORTS" />
			<tx:method name="find*" read-only="true" propagation="SUPPORTS" />
			<tx:method name="load*" read-only="true" propagation="SUPPORTS" />
			<tx:method name="search*" read-only="true" propagation="SUPPORTS" />
			<!-- 对其他方法 使用默认的事务管理 -->
			<tx:method name="*"/>
		</tx:attributes>
	</tx:advice>

	<!-- 配置哪些类的方法需要进行事务管理 -->
	<!-- <aop:config>
		切入表达式（所有返回值类型的service包下或者子包下的所有类中任意多的参数的方法都可以切入） -
		<aop:pointcut id="baseServiceMethods"
			expression="execution(* com.cdeledu.service..*.*(..))" />
		指定事务增强的规则
		<aop:advisor advice-ref="txAdvice" pointcut-ref="baseServiceMethods" />
	</aop:config> -->
	
	<!-- 配置使Spring采用CGLIB代理 -->
	<aop:aspectj-autoproxy proxy-target-class="true" />
	
	<!-- 用注解来实现事务管理(配置事务规则),需要在Service类上标注@Transactional -->
	<tx:annotation-driven transaction-manager="transactionManager" />
</beans>
